package ir.mahozad.cutcon.localization

import ir.mahozad.cutcon.BuildConfig
import ir.mahozad.cutcon.model.LocalSourceSupportedFileType
import ir.mahozad.cutcon.model.SupportedImageFormat
import ir.mahozad.cutcon.parseMarkdownAsChangelog
import kotlin.time.Duration
import kotlin.time.Duration.Companion.hours
import kotlin.time.Duration.Companion.minutes
import kotlin.time.Duration.Companion.seconds

data object MessagesEn : Messages {
    override val changelog by lazy {
        // See the build script where the changelog file was added as an app resource
        val stream = javaClass.getResourceAsStream("/CHANGELOG.md")!!
        parseMarkdownAsChangelog(stream, LanguageEn.tag)
    }

    // See the build script the BuildConfig is generated automatically
    override val appName = BuildConfig.APP_NAME
    override val versionPrefix = "v"
    override val appVersion = "$versionPrefix${BuildConfig.APP_VERSION}"
    override val error = "An error occurred in the application.\nRefer to logs for more details."
    override val openLogFolder = "Open log folder"
    override val from = "from"
    override val fromFile = "from file"
    override val clipCreationIsAbandonedIfExitTheApp = "If you exit the app, clip creation will be abandoned."
    override val areYouSureToExitTheApp = "Do you want to exit the app?"
    override val yes = "Yes"
    override val no = "No"
    override val qualityNotApplicableToRawFormat = "Source quality (cannot change quality for Raw output)"
    override val setClipStart = "Set clip start"
    override val setClipEnd = "Set clip end"
    override val seek5SecondsBackward = "Seek 5 seconds backward"
    override val seek5SecondsForward = "Seek 5 seconds forward"
    override val seek30SecondsBackward = "Seek 30 seconds backward"
    override val seek30SecondsForward = "Seek 30 seconds forward"
    override val livePlayback = "Live playback"
    override val takeScreenshotAndSaveIn = "Take screenshot (S) and save in:"
    override val resumeMediaPlayback = "Resume playback"
    override val pauseMediaPlayback = "Pause playback"
    override val pinAppWindow = "Show always on top (pin)"
    override val unPinAppWindow = "Unpin the app"
    override val muteMediaAudio = "Mute audio"
    override val unMuteMediaAudio = "Unmute audio"
    override val restoreLastPlaybackSpeed = "Restore last playback speed"
    override val resetPlaybackSpeedToNormal = "Reset playback speed to normal"
    override val decreasePlaybackSpeed = "Decrease playback speed"
    override val increasePlaybackSpeed = "Increase playback speed"
    override val switchToFullscreen = "Switch to fullscreen"
    override val switchToMiniMode = "Switch to mini mode"
    override val switchToNormalMode = "Switch to normal mode"
    override val openSourceFolder = "Open source folder"
    override val openSaveFolder = "Open save folder"
    override val switchToManualDateInput = "Switch to manual mode"
    override val switchToSelectionDateInput = "Switch to selection mode"
    override val hideSidePanel = "Hide side panel"
    override val showSidePanel = "Show side panel"
    override val turnOnClipLoop = "Turn on clip loop"
    override val turnOffClipLoop = "Turn off clip loop"
    override val shortcut = "Shortcut:"
    override val and = "and"
    override val weekdaySaturday = "Saturday"
    override val weekdaySunday = "Sunday"
    override val weekdayMonday = "Monday"
    override val weekdayTuesday = "Tuesday"
    override val weekdayWednesday = "Wednesday"
    override val weekdayThursday = "Thursday"
    override val weekdayFriday = "Friday"
    override val cut = "Cut"
    override val copy = "Copy"
    override val paste = "Paste"
    override val selectAll = "Select All"
    override val dlgTitSpecifySaveFile = "Save clip as..."
    override val dlgTitSelectLocalFile = "Select file"
    override val dlgTitSelectIntroImage = "Select intro image"
    override val dlgTitSelectWatermark = "Select watermark"
    override val dlgTitSelectAlbumArt = "Select album art"
    override val dlgTitExistingFile = "Existing file"
    override val dlgTitMissingFile = "Missing file"
    override val dlgTitChangelog = "Changelog"
    override val second = "s"
    override val btnLblOk = "OK"
    override val btnLblOpen = "Open"
    override val btnLblCancel = "Cancel"
    override val btnLblSelectSaveFolder = "Save as..."
    override val btnLblApproveSaveFile = "OK"
    override val btnLblShowChangelog = "Changelog"
    override val btnLblApproveSelectedFile = "Select"
    override val btnLblStartConversion = "START"
    override val btnLblCancelConversion = "CANCEL"
    override val btnLblOpenAppLogFolder = "Open app log folder"
    override val btnTlpOpenFileChooser = "Open the folder"
    override val btnTlpCancelFileChooser = "Discard choosing a file"
    override val btnTlpCancelFileSave = "Discard setting the file"
    override val btnTlpApproveSaveFolder = "Select this as clip save file"
    override val btnTlpApproveSelectedFile = "Select the file"
    override val btnTlpUpFolder = "Up One Level"
    override val btnTlpViewMenu = "View Menu"
    override val btnTlpNewFolder = "Create new folder"
    override val txtLblSourceLocal = "Source"
    override val txtLblToday = "(Today)"
    override val txtLblYesterday = "(Yesterday)"
    override val txtLblPercentSign = "%"
    override val txtLblSaveIn = "Save in:"
    override val txtLblLookIn = "Look in:"
    override val txtLblClipLength = "Clip length:"
    override val txtLblInput = "Input"
    override val txtLblOutput = "Output"
    override val txtLblQuality = "Quality"
    override val txtLblQuality1 = "1"
    override val txtLblQuality2 = "2"
    override val txtLblQuality3 = "3"
    override val txtLblQuality4 = "4"
    override val txtLblQuality5 = "5"
    override val txtLblSelectWatermark = "Watermark"
    override val txtLblSelectIntroImage = "Intro image"
    override val txtLblSelectAlbumArt = "Album art"
    override val txtLblDragFileHere = "can drag it here"
    override val txtLblLanguage = "Language (زبان):"
    override val txtLblCalendar = "Calendar:"
    override val txtLblTheme = "Theme:"
    override val txtLblAspectRatio = "Image ratio:"
    override val txtLblFinishSound = "Success sound:"
    override val txtLblScreenshotSound = "Camera sound:"
    override val txtLblInterlacedFix = "De-interlacing:"
    override val txtLblEnabled = "Enabled"
    override val txtLblDisabled = "Disabled"
    override val txtLblChangelogFeature = "New features"
    override val txtLblChangelogBugFix = "Bug fixes"
    override val txtLblChangelogUpdate = "Updates"
    override val txtLblChangelogRemoval = "Removals"
    override val txtLblChangelogInternal = "Internal changes"
    override val txtLblExistingFile = "The file already exists, overwrite?"
    override val txtLblMissingFile = "The file does not exist"
    override val txtLblFileName = "File name:"
    override val txtLblFileType = "File type:"
    override val txtLblFileTypeAll = "ALL FILES"
    override val txtLblFileFormat = "File format:"
    override val txtLblAspectRatioSource = "Source"
    override val txtLblAspectRatio16To9 = "16:9"
    override val txtLblCalendarGregorian = "Gregorian"
    override val txtLblCalendarSolarHijri = "Solar Hijri"
    override val txtLblThemeLight = "Light"
    override val txtLblThemeDark = "Dark"
    override val radLblFormatMp4 = "MP4"
    override val radLblFormatMp3 = "MP3"
    override val radLblFormatRaw = "Raw/Source"
    override val radLblLanguagePersian = "فارسی"
    override val radLblLanguageEnglish = "English"
    override val txtLblClipCreationSuccess = "Clip created successfully"
    override val txtLblClipCreationFailure = "Failed to create the clip"
    override val txtDscScreenshotHelp = "Press and hold to open the folder"
    override val txtLblLocalFileSupportedTypesDescription = "Media (${LocalSourceSupportedFileType.entries.joinToString { it.name }})"
    override val txtLblIntroSupportedTypesDescription = "Images (${SupportedImageFormat.entries.joinToString { it.name }})"
    override val txtLblCoverSupportedTypesDescription = "Images (${SupportedImageFormat.entries.joinToString { it.name }})"
    override val txtLblHasNoDefault = "(no default)"
    override val txtLblHasDefault = "(has default)"
    override val txtLblAlpha = "Alpha:"
    override val txtLblScale = "Scale:"
    override val txtLblMp3IntroNotSupported = "MP3 output does not support intro"
    override val txtLblRawIntroNotSupported = "Raw output does not support intro"
    override val txtLblRawCoverNotSupported = "Raw output does not support watermark or album art"
    override val txtLblAudioFileIntroNotSupported = "Audio input does not support intro"
    override val txtLblImageFileIntroNotSupported = "Image input does not support intro"
    override val txtLblMiscFileIntroNotSupported = "Input format does not support intro"
    override val txtLblAudioFileWatermarkNotSupported = "Audio input does not support watermark"
    override val txtLblImageFileWatermarkNotSupported = "Image input does not support watermark"
    override val txtLblMiscFileWatermarkNotSupported = "Input format does not support watermark"
    override val txtLblErrorClipNotSet = "Clip has not been set"
    override val txtLblErrorClipLengthZero = "Clip length is zero"
    override val txtLblErrorClipLengthNegative = "Clip length is negative"
    override val txtLblErrorClipStartAfterMediaEnd = "Clip start is larger than media length"
    override val txtLblErrorClipFromImageNotSupported = "Image input does not support creating clip"
    override val txtLblErrorClipFromFormatNotSupported = "Input format does not support creating clip"
    override val txtLblErrorClipFileNotSet = "Save file has not been set"
    override val txtLblReady = "Ready"
    override val txtLblProgressInitializing = "Initializing..."
    override val txtLblProgressCreating = "Creating clip"
    override val txtLblAboutDeveloper = "Developer: Mahdi Hosseinzadeh"
    override val txtLblAboutPoweredBy = "Proudly powered by open-source and free software"
    override val txtLblAboutKotlinLabel = "Kotlin"
    override val txtLblAboutKotlinText = " programming language by JetBrains"
    override val txtLblAboutGradleLabel = "Gradle"
    override val txtLblAboutGradleText = " build tool for building the project"
    override val txtLblAboutJetpackComposeLabel = "Jetpack Compose"
    override val txtLblAboutJetpackComposeText = " by Google for user interface"
    override val txtLblAboutComposeMultiplatformLabel = "Compose Multiplatform"
    override val txtLblAboutComposeMultiplatformText = " by JetBrains for user interface"
    override val txtLblAboutVlcLabel = "libVLC and vlcj"
    override val txtLblAboutVlcText = " for playing and interacting with media"
    override val txtLblAboutFfmpegLabel = "FFmpeg and JavaCV"
    override val txtLblAboutFfmpegText = " for clipping and converting media"
    override val txtLblAboutMaterialDesignLabel = "Material design"
    override val txtLblAboutMaterialDesignText = " and Material icons by Google"
    override val txtLblAboutInkscapeLabel = "Inkscape"
    override val txtLblAboutInkscapeText = " for creating icons and vector graphics"
    override val txtLblAboutIntellijLabel = "IntelliJ IDEA"
    override val txtLblAboutIntellijText = " Community Edition as the main IDE"
    override val txtLblAboutGitLabel = "Git"
    override val txtLblAboutGitText = " for version control and tracking revision history"
    override val txtLblAboutGitHubLabel = "GitHub"
    override val txtLblAboutGitHubText = " by Microsoft for hosting the source code"
    override val txtLblAboutVazirmatnLabel = "Vazirmatn"
    override val txtLblAboutVazirmatnText = " as the font family for Persian (Farsi) text"

    override fun totalClipCreationTime(duration: Duration) = "Took ${timeString(duration)}"

    private fun timeString(duration: Duration): String {
        fun seconds(value: Long) = when (value) {
            0L -> ""
            1L -> "1 second"
            else -> "$value seconds"
        }

        fun minutes(value: Long) = when (value) {
            0L -> ""
            1L -> "1 minute"
            else -> "$value minutes"
        }

        fun hours(value: Long) = when (value) {
            0L -> ""
            1L -> "1 hour"
            else -> "$value hours"
        }
        return if (duration < 1.seconds) {
            "less than one second"
        } else if (duration < 1.minutes) {
            seconds(duration.inWholeSeconds % 60)
        } else if (duration < 1.hours) {
            "${minutes(duration.inWholeMinutes % 60)} ${seconds(duration.inWholeSeconds % 60)}".trim()
        } else {
            "${hours(duration.inWholeHours % 60)} ${minutes(duration.inWholeMinutes % 60)}".trim()
        }
    }
}
